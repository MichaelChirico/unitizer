% Generated by roxygen2 (4.0.2): do not edit by hand
\name{unitizer_sect}
\alias{unitizer_sect}
\title{Define a \code{`unitizer`} Section}
\usage{
unitizer_sect(title = NULL, expr = expression(), details = character(),
  compare = new("unitizerItemTestsFuns"))
}
\arguments{
\item{title}{character 1 length title for the section, can be omitted
though if you do omit it you will have to refer to the subsequent
arguments by name (i.e. \code{`unitizer_sect(expr=...)`})}

\item{expr}{test expression(s), most commonly a call to \code{`{}`} with
several calls inside (see examples)}

\item{details}{character more detailed description of what the purpose
of the section is; currently this doesn't do anything.}

\item{compare}{a function or a \code{`\link{unitizerItemTestsFuns-class}`}
object}
}
\description{
The purpose of \code{`unitizer`} sections is to allow the user to tag a
group of test expressions with meta information as well as to modify the
comparison functions used when determining whether the newly evaluated
values match the reference values.
}
\note{
if you want to modify the functions used to compare conditions,
keep in mind that the conditions are stored in lists, so your function
must loop through the lists and compare conditions pairwise.  By default
\code{`unitizer`} uses the \code{`all.equal`} method for S4 class
\code{`conditionList`}.

\code{`untizer`} does not account for sections when matching new and
reference tests.  All tests will be displayed as per the section they belong
to in the newest version of the test file, irrespective of what section they
were in when the tests were last run.
}
\section{Comparison Functions}{


\code{`unitizer`} will compare values as well as some side effects from
the test expression evaluation.  If you wish to modify the comparison function
for the value of the test expressions then all you need to do is pass your
comparison function as the \code{`compare`} argument.

If a comparison function signals a condition (e.g. throws a warning) the
test will not be evaluated, so make sure that your function does not signal
conditions unless it is genuinely failing.

If you wish to modify the comparison functions for the side effects of test
evaluation (e.g. screen output or conditions), then you need to pass a
\code{`\link{unitizerItemTestsFuns-class}`} object intialized with the
appropriate functions (see example).

Make sure your comparison functions are available to \code{`\link{unitize}`}.
Comparisons will be evaluated in the environment of the test.  By default
\code{`\link{unitize}`} runs tests in environments that are not children to
the global environment, so functions defined there will not be automatically
available.  You can either specify the function in the test file before the
section that uses it, or change the base environment tests are evaluated in with
\code{`unitize(..., env.clean)`}, or make sure that the package that
contains your function is loaded within the test script.
}

\section{Nested Sections}{


It is possible to have nested sections, but titles, etc. are ignored.  The
only effect of nested sections is to allow you to change the comparison
functions for a portion of the outermost \code{`unitizer_sect`}.
}
\examples{
unitizer_sect("Custom Tests", {
  my_fun("a", FALSE)
  my_fun(845, TRUE)
})
unitizer_sect("Compare With Identical",
  {
    my_exact_fun(6L)
    my_exact_fun("hello")
  },
  compare=identical
)
unitizer_sect("Compare With Identical",
  {
    my_exact_fun(6L)
    my_exact_fun("hello")
  },
  compare=identical
)
unitizer_sect("Compare With Identical For Screen Output",
  {
    my_exact_fun(6L)
    my_exact_fun("hello")
  },
  compare=unitizerItemTestsFuns(value=identical, output=identical)
)
}

