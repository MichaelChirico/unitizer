% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/unitize.R
\name{unitize}
\alias{review}
\alias{unitize}
\alias{unitize_dir}
\title{Unitize an R Test Script}
\usage{
unitize(test.file, store.id = NULL, state = getOption("unitizer.state"),
  pre = NULL, post = NULL, history = getOption("unitizer.history.file"),
  interactive.mode = interactive(), force.update = FALSE,
  auto.accept = character(0L))

review(store.id)

unitize_dir(test.dir, store.ids = filename_to_storeid,
  pattern = "^[^.].*\\\\.[Rr]$", state = getOption("unitizer.state"),
  pre = NULL, post = NULL, history = getOption("unitizer.history.file"),
  interactive.mode = interactive(), force.update = FALSE,
  auto.accept = character(0L))
}
\arguments{
\item{test.file}{path to the file containing tests, if supplied path does not
match an actual system path, \code{unitizer} will try to infer a possible
path (see \code{\link{infer_unitizer_location}})}

\item{store.id}{if NULL (default), \code{unitizer} will select a directory
based on the \code{test.file} name by replacing \code{.[rR]} with
\code{.unitizer}.  You can also specify a directory name, or pass any
object that has a defined \code{\link{get_unitizer}} method which allows
you to specify non-standard \code{unitizer} storage mechanisms (see
\code{\link{get_unitizer}}).  Finally, you can pass an actual
\code{unitizer} object if you are using \code{review}.}

\item{state}{character(1L) one of
\code{c("prisitine", "noopt", "basic", "off", "safe")} or an S4 object
inheriting from \code{unitizerState}; modifies how \code{unitizer} manages
aspects of session state that could affect test evaluation (see details).}

\item{pre}{NULL, or a character vector pointing to files and/or directories.
If a character vector, then any files referenced therein will be sourced,
and any directories referenced therein will be scanned non-recursively for
visible files ending in ".r" or ".R", which are then also sourced.  If
NULL, then \code{unitizer} will look for a directory named "_pre" in the
directory containing the first test file and will treat it as if you had
specified it in \code{pre}.  Any objects created by those scripts will be
put into a parent environment for all tests.  This provides a mechanism for
creating objects that are shared across different test files, as well as
loading shared packages.  Unlike objects created during test evaluation,
any objects created here will not be stored in the \code{unitizer} so you
will have not direct way to check whether these objects changed across
\code{unitizer} runs.  Additionally, typing \code{ls} from the review
prompt will not list these objects.}

\item{post}{NULL, or a character vector pointing to files and/or directories.
See \code{pre}.  If NULL will look for a directory named "_post" in the
directory containing the first test file.  Scripts are run just prior to
existing \code{unitizer}.  Keep in mind that \code{unitizer} can manage
most aspects of global state, so you should not need to use this parameter
to unload packages, remove objects, etc.  See details.}

\item{history}{file name to use to store history during interactive unitizer
sessions.}

\item{interactive.mode}{logical(1L) whether to run in interactive mode (
request user input when needed) or not (error if user input is required,
e.g. if all tests do not pass).}

\item{force.update}{logical(1L) if TRUE will give the option to re-store a
unitizer after re-evaluating all the tests even if all tests passed.}

\item{auto.accept}{character(X) ADVANCED USE ONLY: YOU CAN EASILY DESTROY
YOUR \code{unitizer} WITH THIS; whether to auto-accept tests without
prompting, use values in \code{c("new", "failed", "deleted", "error")} to
specify which type(s) of test you wish to auto accept (i.e. same as typing
\code{"Y"} at the \code{unitizer} prompt) or empty character vector to turn
off (default)}

\item{test.dir}{the directory to run the tests on}

\item{store.ids}{one of \itemize{
  \item a function that converts test file names to \code{unitizer} ids; if
    \code{unitize}ing multiple files will be \code{lapply}ed over each file
  \item a character vector with \code{unitizer} ids, must be the same
    length as the number of test files being reviewed (see \code{store.id})
  \item a list of unitizer ids, must be the same length as the number of
    test files being reviewed; useful when you implement special storage
    mechanisms for the \code{unitizers} (see \code{\link{get_unitizer}})
}}

\item{pattern}{a regular expression used to match what subset of files in
\code{test.dir} to \code{unitize}}
}
\value{
\code{unitize} and company are intended to be used primarily for
  the interactive environment and side effects.  The functions do return
  summary data about test outcomes and user input as
  \code{unitizer_result} objects, or for \code{unitize_dir} as
  \code{unitizer_results} objects, invisbly.  See
  \code{\link{unitizer_result}}.
}
\description{
Turn standard R scripts into unit tests by evaluating the expressions and
storing them along with their resuls.
}
\details{
\code{unitize} creates unit tests from a single R file, and
\code{unitize_dir} creates tests from all the R files in the specified
directory (analogous to \code{testthat::test_dir}).

\code{unitizer} stores are identified by \code{unitizer} ids, which by
default are character strings containing the location of the folder the
\code{unitizer} RDS files are kept in.  \code{unitize} and
friends will create a \code{unitizer} id for you based on the test file
name and location, but you can specify your own location as an id, or even
use a completely different mechanism to store the \code{unitizer} data by
implementing S3 methods for \code{\link{get_unitizer}} and
\code{\link{set_unitizer}}.

\code{review} allows you to review existing \code{unitizer}s and modify them
by dropping tests from them.  Tests are not evaluated in this mode; you are
just allowed to review the results of previous evaluations of the tests
Because of this, no effort is made to create reproducible state in the
browsing environments, unlike with \code{unitize} or \code{unitize_dir}
(see \code{state} parameter).

See \code{unitizer} vignettes and demo for details and examples.
}
\section{Default Settings}{


Many of the default settings are specfied in the form \code{getOption("...")}
to allow the user to "permanently" set them to their prefered modes by
setting options in their \code{.Rprofile} file.
}

\section{State}{


You can modify all aspects of state control with the \code{state} parameter.
See the \code{\link{unitizerState}} documentation and the \code{state}
vignette for more details.  One exception to this control are the \code{warn}
and \code{error} options; these are always set to \code{1} and \code{NULL}
respectively during test evaluation.
}
\seealso{
\code{\link{unitizerState}}, \code{\link{unitizer.opts}},
  \code{\link{get_unitizer}}, \code{\link{infer_unitizer_location}},
  \code{\link{unitizer_result}}
}

