% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/state.R
\name{unitizerState}
\alias{in_pkg}
\alias{state}
\alias{state,}
\alias{unitizerState}
\title{Tests and Session State}
\usage{
state(par.env = NULL, search.path = 2L, options = 0L,
  working.directory = 2L, random.seed = 2L, namespaces = 0L)

in_pkg(package = NULL)
}
\arguments{
\item{par.env}{\code{NULL} to use the special \code{unitizer} parent
environment, or an environment to use as the parent environment, or
the name of a package as a character string to use that packages'
namespace as the parent environment, or a \code{unitizerInPkg} object
as produced by \code{\link{in_pkg}}}

\item{search.path}{one of \code{0:2}}

\item{options}{one of \code{0:2}}

\item{working.directory}{one of \code{0:2}}

\item{random.seed}{one of \code{0:2}}

\item{namespaces}{one of \code{0:2}}

\item{package}{character(1L) or NULL; if NULL will tell \code{unitize}
to attempt to identify if the test file is inside an R package folder
structure and if so run tests in that package's namespace.  This should
work with R CMD check tests as well as in normal usage.  If character will
take the value to be the name of the package to use the namespace of as
the parent environment.  Note that \code{in_pkg} does not retrieve the
environment, it just tells \code{unitize} to do so.}
}
\value{
for \code{state} a \code{unitizerStateRaw} object, for \code{in_pkg}
  a \code{unitizerInPkg} object, both of which are suitable as values for
  the \code{state} paramter for \code{\link{unitize}}.
}
\description{
While R generally adheres to a "functional" programming style, there are
several aspects of session state that can affect the results of code
evaluation.  \code{unitizer} attempts to make tests as reproducible as
possible by controlling session state so that it is the same every time a
test is run.  You can control how \code{unitizer} manages state via the
state argument to \code{unitize}.  This help file discusses state management
with \code{unitizer}, and also documents two functions that, in conjunction
with \code{\link{unitize}} or \code{link{unitize_dir}} allow you to control
state management.
}
\section{Overview}{


\bold{Note}: most of what is written in this page about \code{unitize}
applies equally to \code{unitize_dir}

\code{unitizer} provides functionality to insulate test code from variability
in the following:

\itemize{
  \item Workspace / Parent Environment (enabled by default): all tests are
     evaluated in environments that are children of a special environment
     that does not inherit from \code{.GlobalEnv}.  This prevents objects
     that are lying around in your workspace from interfering with your
     tests.  This also allows you to run your tests in a namespace as with
     \code{testthat::test_check}.
  \item Random Seed (enabled by default): is set to a specific value at the
    beginning of each test file so that tests using random values get the
    same value at every test iteration. If you change the order of  your
    tests, or add a test that uses a random sampling before the end of
    the file, that will still affect the random seed.
  \item Working Directory (enabled by default): is set to the tests directory
    inside the package directory provided all test files are in the same
    sub-directory of a package.
  \item Search Path (enabled by default): is set to what you would
    typically find in a freshly loaded vanilla R session.  This means any non
    default packages that are loaded when you run your tests are unloaded
    prior to running your tests.  If you want to use the same libraries
    across multiple tests you can load them with the \code{pre} argument to
    \code{\link{unitize}} or \code{\link{unitize_dir}}.
  \item Options (\bold{disabled} by default): same as search path
  \item Namespaces (\bold{disabled} by default): same as search path; this
    option is only made available to support options since many namespaces
    set options \code{onLoad}, and as such it is necessary to unload and load
    them to ensure default options are set
}
State is reset after running each test file when running multiple test
files with \code{unitize_dir}, which means state changes in one test file
will not affect the next one.

You can modify what aspects of state are managed by using the \code{state}
parameter to \code{\link{unitize}}.  If you are satisfied with basic default
settings you can just use the presets described in the next section.  If you
want more control you can use the return values of the \code{state} and
\code{in_pkg} functions as the values for the \code{state} parameter for
\code{unitize}.
}

\section{State Presets}{


For convenience \code{unitizer} provides several state management presets
that you can specify via the \code{state} parameter to \code{\link{unitize}}.
The simplest method is to specify the preset name as a character value:

\itemize{
  \item "default" turns off options and namespace tracking,
    but otherwise enables all other state tracking.  This is the default
    behavior.
  \item "safe" turns off tracking for search path, namespaces and options.
    These settings, particularly the last two, are the most likely to cause
    compatibility problems.
  \item "pristine" implements the highest level of state tracking and control
  \item "basic" keeps all tracking, but at a less aggressive level; state is
    reset between each test file to the state before you started
    \code{unitize}ing so that no single test file affects another, but the
    state of your workspace, search path, etc. when you launch
    \code{unitizer} will affect all the tests (see the Custom Control)
    section.
  \item "off" state tracking is turned off
}
}

\section{Custom Control}{


If you want to customize each aspect of state control you can pass a
\code{unitizerState} object as the \code{state} argument.  The simplest way
to do this is by using the \code{\link{state}} constructor function.  Look
at the examples for how to do this.

For convenience \code{unitize} allows you to directly specify a parent
environment if all you want to change is the parent evaluation environment
but are otherwise satisfied with the defaults.  You can even use the
\code{\link{in_pkg}} function to tell \code{unitizer} to use the namespace
associated with your current project, assuming it is an R package.  See
examples for details.

If you do chose to modify specific aspects of state control here is a guide
to what the various parameter values for \code{par.env} do:
\itemize{
  \item For \code{par.env}: \code{NULL}, an environment, the name of an
    package, or a \code{unitizerInPkg} object as produced by
    \code{\link{in_pkg}}.
  \item For all other slots, the settings are in \code{0:2} and mean:
    \itemize{
      \item 0 turn off state tracking
      \item 1 track, but start with state as it was when \code{unitize} was
        called
      \item 2 track and set state to what you would typically find in a clean
        R session, with the exception of \code{random.seed}, which is
        set to \code{getOption("unitizer.seed")} (of kind "Wichmann-Hill"
        as that seed is substantially smaller than the R default seed).
} }
}

\section{Namespaces and Options}{


Options and namespace state management are turned off by default
because in order to work they require the ability to fully unload any
non-default packages and namespaces, and there are some packages that cannot
be unloaded, or should not be unloaded (e.g.
\href{https://github.com/Rdatatable/data.table/issues/990}{data.table}). If
you know the packages you typically load in your sessions can be unloaded,
you can turn this functionality on by setting
\code{options(unitizer.state="pristine")} either in your session, in your
\code{.Rprofile} file, or using \code{state="prisitine"} in each call to
\code{unitize} or \code{unitize_dir}.  If you have packages that cannot be
unloaded, but you still want to enable these features, see the "Search Path
and Namespace State Options" section of \code{\link{unitizer.opts}} docs.

If you run \code{unitizer} with options and namespace tracking and you run
into a namespace that cannot be unloaded, or should not be unloaded because
it is listed in \code{getOption("unitizer.namespace.keep")}, \code{unitizer}
will turn off \code{options} state tracking from that point onwards.

Additionally, note that \code{warn} and \code{error} options are always set
to \code{1} and \code{NULL} respectively during test evaluation, irrespective
of what option state tracking level you select.
}

\section{Known Untracked State Elements}{


\itemize{
  \item system time: tests involving functions such as \code{\link{date}}
    will inevitably fail
  \item locale: is not tracked because it so specific to the system and so
    unlikely be be changed by user action; if you have tests that depend on
    locale be sure to set the locale via the \code{pre} argument to
    \code{\link{unitize}}, and also to reset it to the original value in
    \code{post}.
}
}
\examples{
\dontrun{
## In this examples we use `...` to denote other arguments to `unitize` that
## you should specify.  All examples here apply equally to `unitize_dir`

## Turn off state tracking completely
unitize(..., state="off")
## Manage as much of state as possible
unitize(..., state="pristine")

## Use default state management, but evaluate in a custom environment
my.env <- new.env()
unitize(..., state=my.env)
## use custom environment, and turn off search.path tracking
## here we must use the `state` function to construct a state object
unitize(..., state=state(par.env=my.env, search.path=0))

## Specify a namespace to run in by name
unitize(..., state="stats")
unitize(..., state=state(par.env="stats")) # equivalent to previous

## Let `unitizer` figure out the namespace from the test file location;
## assumes test file is inside package folder structure
unitize("mytests.R", state=in_pkg()) # assuming mytests.R is part of a pkg
unitize("mytests.R", state=in_pkg("mypkg")) # also works
}
}
\seealso{
\code{\link{unitize}}, \code{\link{unitizer.opts}},
  \code{\link{in_pkg}}
}

