
R version 4.1.0 alpha (2021-04-26 r80229)
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source(file.path("_helper", "init.R"))
> source(file.path("aammrtf", "ref.R")); make_ref_obj_funs("refobjs")
> 
> suppressWarnings(glob <- unitizer:::unitizerGlobal$new())
> 
> # - "Invisible Expression" -----------------------------------------------------
> 
> e <- new.env()
> exp <- quote(x <- 1:30)
> all.equal(1:30, unitizer:::eval_user_exp(exp, e, global = glob)$value)
[1] TRUE
> 
> # `eval_user_exp` must be evaluated outside of test_that; also note that by
> # design this will output stuff to stderr and stdout
> out.err <- capture.output(type = "message", out.std <- capture.output({
+     test.obj.s3 <- structure("hello", class = "test_obj")
+     setClass("testObj", list(a = "character"))
+     test.obj.s4 <- new("testObj", a = "goodday")
+     print.test_obj <- function(x, ...) stop("Error in Print")
+     setMethod("show", "testObj", function(object) stop("Error in Show"))
+     fun_signal <- function() signalCondition(simpleError("Error in Function",
+         sys.call()))
+     fun_error <- function() stop("Error in function 2")
+     fun_error_cond <- function() stop(simpleError("Error in function 2",
+         sys.call()))
+     fun_error_cond_call <- function() fun_error_cond()
+     fun_s3 <- function() test.obj.s3
+     fun_s4 <- function() test.obj.s4
+     fun_msg <- function() message("This is a Message")
+     fun_warn <- function() warning("This is a warning", immediate. = TRUE)
+     eval.env <- sys.frame(sys.nframe())
+     ex0 <- unitizer:::eval_user_exp(quote(stop()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex0$trace)
+     trace0 <- unitizer:::unitizer_traceback()
+     ex1 <- unitizer:::eval_user_exp(quote(fun_signal()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex1$trace)
+     trace1 <- unitizer:::unitizer_traceback()
+     ex2 <- unitizer:::eval_user_exp(quote(fun_error()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex2$trace)
+     trace2 <- unitizer:::unitizer_traceback()
+     ex2a <- unitizer:::eval_user_exp(expression(fun_error()),
+         eval.env, global = glob)
+     unitizer:::set_trace(ex2a$trace)
+     trace2a <- unitizer:::unitizer_traceback()
+     ex6 <- unitizer:::eval_user_exp(quote(fun_error_cond()),
+         eval.env, global = glob)
+     unitizer:::set_trace(ex6$trace)
+     trace6 <- unitizer:::unitizer_traceback()
+     ex7 <- unitizer:::eval_user_exp(quote(fun_error_cond_call()),
+         eval.env, global = glob)
+     unitizer:::set_trace(ex7$trace)
+     trace7 <- unitizer:::unitizer_traceback()
+     ex3 <- unitizer:::eval_user_exp(quote(fun_s3()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex3$trace)
+     trace3 <- unitizer:::unitizer_traceback()
+     ex3a <- unitizer:::eval_user_exp(expression(fun_s3()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex3a$trace)
+     trace3a <- unitizer:::unitizer_traceback()
+     ex4 <- unitizer:::eval_user_exp(quote(fun_s4()), eval.env,
+         global = glob)
+     ex4a <- unitizer:::eval_user_exp(expression(fun_s4()), eval.env,
+         global = glob)
+     unitizer:::set_trace(ex4a$trace)
+     trace4a <- unitizer:::unitizer_traceback()
+     ex5 <- unitizer:::eval_user_exp(quote(sum(1:20)), eval.env,
+         global = glob)
+     ex9 <- unitizer:::eval_user_exp(quote(fun_warn()), eval.env,
+         global = glob)
+     ex10 <- unitizer:::eval_user_exp(quote(fun_msg()), eval.env,
+         global = glob)
+     ex11 <- unitizer:::eval_user_exp(quote((function() quote(stop("shouldn't error")))()),
+         eval.env, global = glob)
+ }))
> # NOTE: deparsed test values generated with unitizer:::deparse_mixed
> 
> # - "User Expression Evaluation" -----------------------------------------------
> 
> # a condition error, signaled, not stop (hence no aborted, etc.)
> identical(ex1, rds(100))
Error in gzfile(file, "rb") : cannot open the connection
In addition: Warning message:
In gzfile(file, "rb") :
  cannot open compressed file '/Volumes/PERSONAL/repos/unitizer/tests/_helper/ref-objs/refobjs/100.rds', probable reason 'No such file or directory'
Execution halted
CLEANUP COMPLETE
