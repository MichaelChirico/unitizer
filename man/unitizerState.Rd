% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/state.R
\docType{class}
\name{unitizerState}
\alias{unitizerState}
\alias{unitizerStateBasic}
\alias{unitizerStateBasic-class}
\alias{unitizerStateDefault}
\alias{unitizerStateDefault-class}
\alias{unitizerStateOff}
\alias{unitizerStateOff-class}
\alias{unitizerStatePristine}
\alias{unitizerStatePristine-class}
\alias{unitizerStateSafe}
\alias{unitizerStateSafe-class}
\title{Tests and Session State}
\description{
While R generally adheres to a "functional" programming style, there are
several aspects of session state that can affect the results of code
evaluation.  \code{unitizer} attempts to make tests as reproducible as
possible by controlling session state so that it is the same every time a
test is run.
}
\section{Slots}{

\describe{
\item{\code{search.path}}{one of \code{0:2}}

\item{\code{options}}{one of \code{0:2}}

\item{\code{working.directory}}{one of \code{0:2}}

\item{\code{random.seed}}{one of \code{0:2}}

\item{\code{par.env}}{\code{NULL} to use the special \code{unitizer} parent
  environment, or an environment to use as the parent environment, or
  the name of a package as a character string to use that packages'
  namespace as the parent environment}
}}
\note{
\code{\link{unitize_dir}} and \code{\link{unitize}} can accept
  character values instead of the classes here; these are just translated to
  the corresponding class defined here.  See the docs for the \code{state}
  parameter for those functions.
}
\section{Overview}{


\code{unitizer} provides functionality to insulate test code from variability
in the following:

\itemize{
  \item Workspace (enabled by default): all tests are evaluated in
     environments that are children of a special environment that does not
     inherit from \code{.GlobalEnv}.  This prevents objects that are
     lying around in your workspace from interfering with your tests.
  \item Random Seed (enabled by default): is set to a specific value at the
    beginning of each test file so that tests using random values get the
    same value at every test iteration. If you change the order of  your
    tests, or add a test that uses a random sampling before the end of
    the file, that will still affect the random seed.
  \item Working Directory (enabled by default): is set to the package
    directory if all test files are  in the same sub-directory of a package.
  \item Search Path (\bold{enabled} by default): is set to what you would
    typically find in a freshly loaded vanilla R session.  This means any non
    default packages that are loaded when you run your tests are unloaded
    prior to running your tests.  If you want to use the same libraries
    across multiple tests you can load them with the \code{pre} argument to
    \code{\link{unitize}} or \code{\link{unitize_dir}}.
  \item Options (\bold{disabled} by default): same as search path
  \item Namespaces {\bold{disabled}} by default): same as search path; this
    option is only made available to support options since many namespaces
    set options \code{onLoad}, and as such it is necessary to unload and load
    them to ensure default options are set
}
State is reset after running each test file when running multiple test
files with \code{unitize_dir}, which means state changes in one test file
will not affect the next one.
}

\section{Search Path and Options}{


Search options and namespace state management are turned off by default
because in order to work they require the ability to fully unload any
non-default packages and namespaces, and there are some packages that cannot
be unloaded, or should not be unloaded (e.g.
\href{https://github.com/Rdatatable/data.table/issues/990}{data.table}). If
you know the packages you typically load in your sessions can be unloaded,
you can turn this functionality on by setting
\code{options(unitizer.state="pristine")} either in your session, in your
\code{.Rprofile} file, or using \code{state="prisitine"} in each call to
\code{unitize} or \code{unitize_dir}.  If you have packages that cannot be
unloaded, but you still want to enable these features, see the "Search Path
and Namespace State Options" section of \code{\link{unitizer.opts}} docs.

If you run \code{unitizer} with options and namespace tracking and you run
into a namespace that cannot be unloaded, or should not be unloaded because
it is listed in \code{getOption("unitizer.namespace.keep")}, \code{unitizer}
will turn off \code{options} state tracking from that point onwards.

Additionally, note that \code{warn} and \code{error} options are always set
to \code{1} and \code{NULL} respectively during test evaluation, irrespective
of what option state tracking level you select.
}

\section{State Presets}{


You can use these classes for detailed control of how \code{unitizer} tracks
and modifies state during test evaluation and review.  These can be passed
as the \code{state} argument to \code{\link{unitize}} and
\code{\link{unitize_dir}}.

There are several classes defined, though their only purpose is to act as
presets since they are identical except for their prototype values:
\itemize{
  \item \code{unitizerStateDefault} turns off options and namespace tracking,
    but otherwise enables all other state tracking.  This is the default
    behavior.
  \item \code{unitizerStateSafe} is the default and turns off tracking for
    search path, namespaces and options.  These settings, particularly the
    last two, are the most likely to cause compatibility problems
  \item \code{unitizerStatePristine} implements the highest level of state
    tracking and control
  \item \code{unitizerStateBasic} keeps all tracking, but at a less
    aggressive level; state is reset between each test file to the state
    before you started \code{unitize}ing so that no single test file affects
    another, but the state of your workspace, search path, etc. when you
    launch \code{unitizer} will affect all the tests (see the Custom Control)
    section.
  \item \code{unitizerStateOff} state tracking is turned off
}
Each class has a constructor function of the same name as the class.
}

\section{Custom Control}{


In addition to the preset classes, you can set any of the slots to any valid
setting (see examples).  For \code{par.env} that setting is either
\code{NULL} or an environment.  for all other slots, the settings are in
\code{0:2} and mean:
\enumerate{
  \item 0 turn off state tracking
  \item 1 track, but start with state as it was when \code{unitize} was
    called
  \item 2 track and set state to what you would typically find in a clean
    R session, with the exception of \code{random.seed}, which is
    set to \code{getOption("unitizer.seed")} (of kind "Wichmann-Hill"
    as that seed is substantially smaller than the R default seed).
}
}

\section{Known Untracked State Elements}{


\itemize{
  \item system time: tests involving functions such as \code{\link{date}}
    will inevitably fail
  \item locale: is not tracked because it so specific to the system and so
    unlikely be be changed by user action; if you have tests that depend on
    locale be sure to set the locale via the \code{pre} argument to
    \code{\link{unitize}}, and also to reset it to the original value in
    \code{post}.
}
}
\examples{
\dontrun{
## use a custom environment as parent env
my.env <- new.env()
unitize(..., state=unitizerStatePrisitine(par.env=my.env))
## Basic, but do not track options
unitize(..., state=unitizerStateBasic(options=0))
## No options tracking, and in `dplyr` package namespace environment
unitize(..., state=unitizerStateNoOpt(par.env="dplyr"))
}
}
\seealso{
\code{\link{unitize}}, \code{\link{unitizer.opts}}
}

