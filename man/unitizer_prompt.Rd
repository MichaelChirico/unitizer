% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/prompt.R
\name{unitizer_prompt}
\alias{unitizer_prompt}
\title{Handles The Actual User Interaction}
\usage{
unitizer_prompt(text, browse.env = globalenv(), help = character(),
  valid.opts, hist.con = NULL, exit.condition = function(exp, env) FALSE)
}
\arguments{
\item{text}{the prompt text to display}

\item{browse.env}{the environment to evaluate user expressions in; typically
this will contain interesting objects (use \code{ls()} to review)}

\item{help}{a character vector with help suggestions: the first value in the
vector is \code{`\link{word_cat}`} output, the rest normal \code{`cat`}}

\item{hist.con}{connection to save history to}

\item{exit.condition}{function used to evaluate whether user input should
cause the prompt loop to exit; this function should accept two parameters:
\itemize{
  \item expression typed in by the user
  \item environment the environment user expressions get evaluated in
}
The function can then decide to exit or not based on either the literal
expression or evaluate the expression and decide based on the result.  This
is implemented this way because \code{`eval_user_exp`} will print to screen
which may not be desirable.  Function should return a value which will then
be returned by \code{`unitizer_prompt`}, unless this value is \code{`FALSE`}
in which case \code{`unitizer_prompt`} will continue with normal evaluation.}

\item{valid}{opts the special letters user can type to get a special action,
typically a character vector where the names are one letter (though they
don't actually have to be) and are looked for as user typed input; note that
the quit and help options will always be appended to this}
}
\value{
mixed allowable user input
}
\description{
Will keep accepting user input until either:
\itemize{
  \item User types one of the names of \code{`valid.opts`}, typically "Y" or
    "N", but will vary
  \item User types "Q"
  \item User inputs an expression that when evaluated and fed to
    \code{`exit.condition`} returns TRUE
}
The set-up is intended to replicate something similar to what happens when
code hits a \code{`browse()`} statement.  User expressions are evaluated
and output to screen, and special expressions as described above cause the
evaluation loop to terminate.
}
\seealso{
browse_unitizer_items
}
\keyword{internal}

