% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/unitize.R
\name{unitize}
\alias{review}
\alias{unitize}
\alias{unitize_dir}
\title{Unitize an R Test Script}
\usage{
unitize(test.file, store.id = NULL, interactive.mode = interactive(),
  env.clean = TRUE,
  search.path.clean = getOption("unitizer.search.path.clean"),
  search.path.keep = c("tools:rstudio", "package:unitizer"),
  force.update = FALSE)

review(x, env.clean = TRUE,
  search.path.clean = getOption("unitizer.search.path.clean"),
  search.path.keep = c("tools:rstudio", "package:unitizer"))

unitize_dir(test.dir, test.file.regex = "^[^.].*\\\\.[Rr]$",
  unitizer.ids = function(x) sub("(\\\\.[Rr])?$", ".unitizer", x),
  interactive.mode = interactive(), env.clean = TRUE,
  search.path.clean = getOption("unitizer.search.path.clean"),
  search.path.keep = c("tools:rstudio", "package:unitizer"),
  force.update = FALSE)
}
\arguments{
\item{test.file}{path to the file containing tests, if supplied path does not
match an actual system path, \code{unitizer} will try to infer a possible
path (see \code{\link{infer_unitizer_location}})}

\item{store.id}{a folder to store the \code{unitizer} objects in; if NULL
will select a folder at the same location as the test file with the same
name as the testfile, except ending in \code{.unitizer} instead of
\code{.R}.  If this folder does not exist, it will be created.  This is the
default option, you can create custom \code{unitizer} stores as well
(see vignette and \code{\link{get_unitizer}}).}

\item{interactive.mode}{logical(1L) whether to run in interactive mode}

\item{env.clean}{TRUE or environment, if TRUE tests are run in a clean
environment, if an environment they are run with that environment as the
parent environment.}

\item{search.path.clean}{logical(1L) if TRUE all items on the search path that
are not part of a clean R session are detached prior to running tests.  Note
namespaces for detached packages remain loaded.  Additionally, the search
path is restored to its initial state upon exiting \code{unitizer} so any
packages added/removed, or objects attached/detached from search path are
restored to original state.  See "Reproducible Tests" vignette for details.}

\item{search.path.keep}{character any additional items on the search path
to keep attached; has no effect if \code{search.path.clean} is FALSE}

\item{force.update}{logical(1L) if TRUE will give the option to re-store a
unitizer after re-evaluating all the tests even if all tests passed.}

\item{x}{for \code{review} only, either a \code{unitizer} or something that,
when passed to \code{\link{get_unitizer}}, will retrieve a unitizer (i.e.
equivalent to what would get passed in \code{store.id}).}

\item{test.dir}{the directory to run the tests on}

\item{test.file.regex}{a regular expression used to match which files in
\code{test.dir} to \code{unitize}}

\item{unitizer.ids}{one of \itemize{
  \item a vectorized function that converts test file names to
    \code{unitzer} ids (see default value for example)
  \item a character vector with \code{unitizer} ids, must be the same
    length as the number of test files being reviewed
  \item a list of unitizer ids, must be the same length as the number of
    test files being reviewed; useful when you implement special storage
    mechanisms for the \code{unitizers} (see \code{\link{get_unitizer}})
}}
}
\value{
the \code{unitizer} object updated as per user instructions,
  invisibly, or for \code{unitize_dir}, a list of the \code{unitizer}
  objects generated by each test file, invisibly
}
\description{
Turn standard R scripts into unit tests by evaluating the expressions and
storing them along with their resuls.
}
\details{
\code{unitize} creates unit tests from a single R file, and
\code{unitize_dir} creates tests from all the R files in the specified
directory (analogous to \code{testthat::test_dir}).

\code{review} allows you to review existing \code{unitizer} or modify it
by dropping tests from it.  This is useful if you ever have second thoughts
about previously accepted tests and wish to inspect them.

\code{unitizer} stores are identified by \code{unitizer} ids, which by
default are character strings containing the location of the folder the
\code{unitizer} RDS files are kept in.  \code{unitize} and
friends will create a \code{unitizer} id for you based on the test file
name and location, but you can specify your own location as an id, or even
use a completely different mechanism to store the \code{unitizer} data by
implementing S3 methods for \code{\link{get_unitizer}} and
\code{\link{set_unitizer}}.

See \code{unitizer} vignettes and demo for details and examples.
}
\seealso{
\code{\link{get_unitizer}}
}

